#include "common/frame_data.hlsl"
#include "common/vs_post_out.hlsl"

static const float FXAA_REDUCE_MIN = 1. / 128;
static const float FXAA_REDUCE_MUL = 1. / 8;
static const float FXAA_SPAN_MAX = 8;

SamplerState smp : register(s0);
Texture2D lit_map : register(t0);

float3 fxaa_image(
    float2 fragCoord,
    SamplerState smp,
    Texture2D tex,
    float2 rcpFrame
) {
    	float3 color;
    	float3 rgbNW = tex.SampleLevel(smp, (fragCoord + float2(-1.0, -1.0)) * rcpFrame, 0).xyz;
    	float3 rgbNE = tex.SampleLevel(smp, (fragCoord + float2(1.0, -1.0)) * rcpFrame, 0).xyz;
    	float3 rgbSW = tex.SampleLevel(smp, (fragCoord + float2(-1.0, 1.0)) * rcpFrame, 0).xyz;
    	float3 rgbSE = tex.SampleLevel(smp, (fragCoord + float2(1.0, 1.0)) * rcpFrame, 0).xyz;
    	float3 rgbM  = tex.SampleLevel(smp, fragCoord  * rcpFrame, 0).xyz;
    	float3 luma = float3(0.299, 0.587, 0.114);
    	float lumaNW = dot(rgbNW, luma);
    	float lumaNE = dot(rgbNE, luma);
    	float lumaSW = dot(rgbSW, luma);
    	float lumaSE = dot(rgbSE, luma);
    	float lumaM  = dot(rgbM,  luma);
    	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

    	float2 dir;
    	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

    	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
    						(0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);

    	float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    	dir = min(float2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
    			max(float2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
    			dir * rcpDirMin)) * rcpFrame;

    	float3 rgbA = 0.5 * (
    		tex.SampleLevel(smp, fragCoord * rcpFrame + dir * (1.0 / 3.0 - 0.5), 0).xyz +
    		tex.SampleLevel(smp, fragCoord * rcpFrame + dir * (2.0 / 3.0 - 0.5), 0).xyz);
    	float3 rgbB = rgbA * 0.5 + 0.25 * (
    		tex.SampleLevel(smp, fragCoord * rcpFrame + dir * -0.5, 0).xyz +
    		tex.SampleLevel(smp, fragCoord * rcpFrame + dir * 0.5, 0).xyz);

    	float lumaB = dot(rgbB, luma);
    	if ((lumaB < lumaMin) || (lumaB > lumaMax))
    		color = rgbA;
    	else
    		color = rgbB;
    	return color;
}

float4 main(VSPostOut input) : SV_TARGET0 {
    float3 image = fxaa_image(
        input.tex * viewportSize,
        smp,
        lit_map,
        1 / viewportSize
    );
    return float4(image, 1);
}
